//
// GBA Sound Demo - Song
// by Sean Connelly (@velipso), https://sean.cm
// The Unlicense License
// Project Home: https://github.com/velipso/gba-sound-demo
//

.stdlib

//.def $VBLANK_BUFFER = 16    //  1K
//.def $VBLANK_BUFFER = 32    //  2K
//.def $VBLANK_BUFFER = 48    //  3K
//.def $VBLANK_BUFFER = 64    //  4K
//.def $VBLANK_BUFFER = 96    //  6K
//.def $VBLANK_BUFFER = 112   //  7K
//.def $VBLANK_BUFFER = 176   // 11K
//.def $VBLANK_BUFFER = 192   // 12K
.def $VBLANK_BUFFER = 224     // 13K
//.def $VBLANK_BUFFER = 304   // 18K
//.def $VBLANK_BUFFER = 336   // 20K
//.def $VBLANK_BUFFER = 352   // 21K
//.def $VBLANK_BUFFER = 448   // 27K
//.def $VBLANK_BUFFER = 528   // 31K
//.def $VBLANK_BUFFER = 608   // 36K
//.def $VBLANK_BUFFER = 672   // 40K
//.def $VBLANK_BUFFER = 704   // 42K
//.def $VBLANK_BUFFER = 912   // 55K
//.def $VBLANK_BUFFER = 1056  // 63K
//.def $VBLANK_BUFFER = 1216  // 73K
//.def $VBLANK_BUFFER = 1232  // 74K
//.def $VBLANK_BUFFER = 1344  // 80K

//.def $IRQ_BUFFER    = 304   // 16K
.def $IRQ_BUFFER      = 608   // 32K
//.def $IRQ_BUFFER    = 1216  // 64K

.script
  say 'VBlank sample rate:', 2^24 * $VBLANK_BUFFER / 280896, 'hz'
  say 'IRQ sample rate:', 2^14 * $IRQ_BUFFER / 304, 'hz'
.end

.struct $G = 0x03004000
  .s32 cursor
  .s32 fillRequest
  .s32 songA
  .s32 songB
  .s32 bufferAddrA
  .s32 bufferAddrA2
  .s32 bufferAddrB
  .s32 bufferAddrB2
  .s8 bufferA1[$VBLANK_BUFFER]
  .s8 bufferA2[$VBLANK_BUFFER]
  .s8 bufferB1[$IRQ_BUFFER]
  .s8 bufferB2[$IRQ_BUFFER]
  .s32 _end
.end
.if $G._end > 0x03006000
  .error "Globals too big, running into stack"
.end

// GBA header
.begin
  b @@main
  .logo
  .title "GBASND2"
  .i8 "CUNE77"
  .i16 150, 0, 0, 0, 0
  .i8 0 // version
  .crc
  .i16 0
@@main:
.end
  // set cartridge wait state for faster access
  ldr   r0, =$REG_WAITCNT
  ldr   r1, =0x4317
  strh  r1, [r0]

  // enable display + bg0
  ldr   r0, =$REG_DISPCNT
  ldr   r1, =0b0000000100000_000
  strh  r1, [r0]

  // configure bg0 to start at 0x06000000/0x06004000
  ldr   r0, =$REG_BG0CNT
  ldr   r1, =0b00_0_00000_00_00_01_00
  strh  r1, [r0]

  // slide over slightly
  ldr   r0, =$REG_BG0HOFS
  ldr   r1, =16
  strh  r1, [r0]

  // load tile data
  ldr   r0, =0x06004000
  ldr   r1, =@tilesheetStart
  ldr   r2, =@tilesheetEnd - @tilesheetStart
  bl    @memcpy32

  // load palette
  ldr   r0, =0x05000000
  ldr   r1, =@paletteStart
  ldr   r2, =@paletteEnd - @paletteStart
  bl    @memcpy32

  // color bottom half green
  .begin
    ldr   r0, =0x06000280
    ldr   r1, =10 * 32
    ldr   r2, =0x2000
@@loop:
    strh  r2, [r0]
    adds  r0, #2
    subs  r1, #1
    bne   @@loop
  .end

  // put URL at bottom
  ldr   r0, =0x060004e8
  ldr   r1, =@webUrl
  ldr   r2, =24
  bl    @memcpy32

  // put indicator in bottom-left corner
  ldr   r0, =0x060004c4
  ldr   r1, =0x2084
  strh  r1, [r0]

  // copy over IWRAM program and run it
  ldr   r0, =0x03000000
  ldr   r1, =@iwramStart
  ldr   r2, =@iwramEnd - @iwramStart
  bl    @memcpy32
  ldr   r0, =@sndInit
  bl    @bxr0

@loop:
  bl    @nextFrame

  // check input
  .begin
    ldr   r0, =$REG_KEYINPUT
    ldrh  r0, [r0]
    nots  r0, r0
    ldr   r1, =0x008
    ands  r1, r0
    bne   @@hitStart
    ldr   r1, =0x3ff
    ands  r1, r0
    bne   @@hitButton
    b     @@doneInput
@@hitStart:
    ldr   r0, =$G.songA
    ldr   r1, =$G.songB
    ldr   r2, =0
    str   r2, [r0]
    str   r2, [r1]
    b     @@doneInput
@@hitButton:
    ldr   r0, =$G.cursor
    ldr   r1, [r0]
    eor   r1, #1
    str   r1, [r0]
    ldr   r0, =$REG_SOUNDCNT_H
    cmp   r1, #1
    beq   @@channelB
    ldr   r1, =0xcb0f
    b     @@channelDone
@@channelB:
    ldr   r1, =0xf80f
@@channelDone:
    strh  r1, [r0]
    bl    @writeDisplay
@@waitNoInput:
    bl    @nextFrame
    bl    @writeDisplay
    ldr   r0, =$REG_KEYINPUT
    ldrh  r0, [r0]
    ldr   r1, =0x3ff
    cmp   r0, r1
    bne   @@waitNoInput
@@doneInput:
  .end

  bl    @writeDisplay

  b     @loop
  .pool

@bxr0:
  bx    r0
@bxr2:
  bx    r2

@writeDisplay:
  .begin
    push  {r4-r5, lr}

    // print cursor
    .begin
      ldr   r4, =$G.cursor
      ldr   r4, [r4]

      // cursor 0
      ldr   r0, =10
      ldr   r1, =4
      cmp   r4, #0
      beq   @@cursor0
      ldr   r2, =0x1000
      b     @@done0
@@cursor0:
      ldr   r2, =0x103c
@@done0:
      bl    @printChar

      // cursor 1
      ldr   r0, =10
      ldr   r1, =14
      cmp   r4, #1
      beq   @@cursor1
      ldr   r2, =0x3000
      b     @@done1
@@cursor1:
      ldr   r2, =0x303c
@@done1:
      bl    @printChar
    .end

    // print rate1
    .begin
      ldr   r0, =12
      ldr   r1, =4
      ldr   r2, =0x0000
      ldr   r3, =$G.cursor
      ldr   r3, [r3]
      cmp   r3, #0
      bne   @@skipPalette
      ldr   r2, =0x1000
@@skipPalette:
      ldr   r3, =@rate1
      bl    @printRate
    .end

    // print rate2
    .begin
      ldr   r0, =12
      ldr   r1, =14
      ldr   r2, =0x2000
      ldr   r3, =$G.cursor
      ldr   r3, [r3]
      cmp   r3, #1
      bne   @@skipPalette
      ldr   r2, =0x3000
@@skipPalette:
      ldr   r3, =@rate2
      bl    @printRate
    .end

    // print top speaker
    .begin
      ldr   r0, =0x06000130
      ldr   r1, =0x0080
      ldr   r2, =$G.cursor
      ldr   r2, [r2]
      cmp   r2, #0
      bne   @@skipPalette
      ldr   r1, =0x1080
@@skipPalette:
      strh  r1, [r0]
      add   r0, #2
      add   r1, #2
      strh  r1, [r0]
      add   r0, #0x3e
      sub   r1, #1
      strh  r1, [r0]
      add   r0, #2
      add   r1, #2
      strh  r1, [r0]
    .end

    // print bottom speaker
    .begin
      ldr   r0, =0x060003b0
      ldr   r1, =0x2080
      ldr   r2, =$G.cursor
      ldr   r2, [r2]
      cmp   r2, #1
      bne   @@skipPalette
      ldr   r1, =0x3080
@@skipPalette:
      strh  r1, [r0]
      add   r0, #2
      add   r1, #2
      strh  r1, [r0]
      add   r0, #0x3e
      sub   r1, #1
      strh  r1, [r0]
      add   r0, #2
      add   r1, #2
      strh  r1, [r0]
    .end

    pop   {r4-r5}
    pop   {lr}
    bx    lr
  .end

@printChar: //(x, y, character)
  .begin
    mov   r1, r1, lsl #6
    mov   r0, r0, lsl #1
    adds  r1, r0
    ldr   r0, =0x06000000
    strh  r2, [r0, r1]
    adds  r2, #1
    adds  r1, #64
    strh  r2, [r0, r1]
    bx    lr
    .pool
  .end

@printRate: //(x, y, palette, rateTextPointer)
  .begin
    push  {r4-r8, lr}
    mov   r4, r0
    mov   r5, r1
    mov   r6, r2
    mov   r7, r3
    mov   r8, #0 // counter
@@nextChar:
    mov   r0, r4
    mov   r1, r5
    mov   r2, r6
    ldrb  r3, [r7]
    sub   r3, #32
    add   r2, r2, r3, lsl #1
    bl    @printChar
    add   r7, #1
    add   r4, #1
    add   r8, #1
    cmp   r8, #7
    blt   @@nextChar

    pop   {r4-r8}
    pop   {lr}
    bx    lr
    .pool
  .end

@nextFrame:
  .begin
    push  {r4-r5, lr}
    swi   0x050000

    // always swap DMA 1 / FIFO A
    .begin
      ldr   r0, =$REG_DMA1CNT_H
      ldr   r1, =$REG_DMA1SAD
      ldr   r2, =0
      ldr   r3, =0xb640
      ldr   r4, =$G.bufferAddrA2
      ldr   r5, [r4]

      // swap out the DMA
      // disable DMA
      strh  r2, [r0]
      // set source
      str   r5, [r1]
      // enable DMA
      strh  r3, [r0]

      // swap bufferAddrA with bufferAddrA2
      ldr   r0, =$G.bufferAddrA
      ldr   r1, [r0]
      str   r5, [r0]
      str   r1, [r4]

      // render into bufferAddrA2
      mov   r0, r1
      ldr   r2, =@renderWaveA
      bl    @bxr2

      // check fillRequest
      ldr   r0, =$G.fillRequest
      ldr   r1, [r0]
      cmp   r1, #0
      beq   @@skipRender2

      // clear fillRequest
      ldr   r1, =0
      str   r1, [r0]

      // render into bufferAddrB2
      ldr   r0, =$G.bufferAddrB2
      ldr   r0, [r0]
      ldr   r2, =@renderWaveB
      bl    @bxr2
@@skipRender2:
    .end

    // fade out indicator
    .begin
      ldr   r0, =0x05000046
      ldrh  r1, [r0]
      cmp   r1, #0
      beq   @@done
      mov   r2, r1, lsr #10
      mov   r3, r1, lsr #5
      and   r3, r3, #0x1f
      and   r1, r1, #0x1f
      cmp   r1, #0
      beq   @@skip1
      sub   r1, #1
@@skip1:
      cmp   r2, #0
      beq   @@skip2
      sub   r2, #1
@@skip2:
      cmp   r3, #0
      beq   @@skip3
      sub   r3, #1
@@skip3:
      orr   r1, r2, lsl #10
      orr   r1, r3, lsl #5
      strh  r1, [r0]
@@done:
    .end

    pop   {r4-r5}
    pop   {lr}
    bx    lr
  .end

@memcpy32: //(dest, source, byte count)
  .begin
    subs  r2, #32
    blt   @@last32
    stmfd sp!, {r3-r10}
@@chunk:
    ldmia r1!, {r3-r10}
    stmia r0!, {r3-r10}
    subs  r2, #32
    blt   @@done32
    ldmia r1!, {r3-r10}
    stmia r0!, {r3-r10}
    subs  r2, #32
    blt   @@done32
    ldmia r1!, {r3-r10}
    stmia r0!, {r3-r10}
    subs  r2, #32
    blt   @@done32
    ldmia r1!, {r3-r10}
    stmia r0!, {r3-r10}
    subs  r2, #32
    bge   @@chunk
@@done32:
    ldmfd sp!, {r3-r10}
@@last32:
    adds  r2, #32
    bxle  lr
@@last4:
    subs  r2, #4
    ldrge r12, [r1], #4
    strge r12, [r0], #4
    bgt   @@last4
    bxeq  lr
    add   r2, #4
@@bytecopy:
    ldrb  r12, [r1], #1
    ldrb  r12, [r0], #1
    subs  r2, #1
    bgt   @@bytecopy
    bx    lr
    .pool
  .end

// IWRAM START ///////////////////////////////////////////////////////
@iwramStart:
.begin
.base 0x03000000
.arm

@irqNone:
  .begin
    mov   r0, #0x04000000
    ldr   ip, [r0, #0x200]!
    and   r2, ip, ip, lsr #16
    strh  r2, [r0, #2]
    ldr   r3, [r0, #-0x208]
    orr   r3, r3, r2
    str   r3, [r0, #-0x208]
    bx    lr
    .pool
  .end

@irqStartTimer:
  .begin
    // delay a certain number of cycles to align timer2 with vblank
    // this can require tuning, depending on a lot of factors, and
    // was a pain to get exactly right... the indicator will blink
    // when timer2 and vblank are exactly in alignment
    push  {lr}
    ldr   r0, =0x3d27b - 16
    bl    @cycleDelay

    // set IRQ handler
    ldr   r0, =0x03007ffc
    ldr   r1, [#@@irqHopAddr]
    str   r1, [r0]

    // start timer
    ldr   r0, =$REG_TM2CNT
    ldr   r1, =0xc1
    strh  r1, [r0]

    pop   {lr}
    b     @irqNone
@@irqHopAddr:
    .i32 @irqHop
    .pool
  .end

@irqHop:
  .begin
    // set IRQ handler
    ldr   r0, =0x03007ffc
    ldr   r1, =@irqSwap
    str   r1, [r0]

    b     @irqNone
    .pool
  .end

@irqSwap:
  .begin
    // irqNone...
    mov   r0, #0x04000000
    ldr   ip, [r0, #0x200]!
    and   r2, ip, ip, lsr #16
    strh  r2, [r0, #2]
    ldr   r3, [r0, #-0x208]
    orr   r3, r3, r2
    str   r3, [r0, #-0x208]
    // but check for timer2
    ands  r3, r2, #0x20
    bne   @@swap
    bx    lr

@@swap:
    push  {r4-r5}

    // prepare to swap out DMA
    ldr   r0, =$REG_DMA2CNT_H
    ldr   r1, =$REG_DMA2SAD
    ldr   r2, =0
    ldr   r3, =0xb640
    ldr   r4, =$G.bufferAddrB2
    ldr   r5, [r4]

    // swap out the DMA
    // disable DMA
    strh  r2, [r0]
    // set source
    str   r5, [r1]
    // enable DMA
    strh  r3, [r0]

    // swap bufferAddrB with bufferAddrB2
    ldr   r2, =$G.bufferAddrB
    ldr   r1, [r2]
    str   r5, [r2]
    str   r1, [r4]

    // flag fillRequest
    ldr   r0, =$G.fillRequest
    ldr   r1, =1
    str   r1, [r0]

    pop   {r4-r5}

    // check for vblank at same time, and blink indicator
    and   r2, ip, ip, lsr #16
    ands  r3, r2, #0x01
    bxeq  lr
    // blink indicator
    ldr   r1, =0x05000046
    ldr   r2, =rgb(31, 31, 31)
    strh  r2, [r1]
    bx    lr
    .pool
  .end

@sndInit:
  .begin
    // disable interrupts during setup
    ldr   r0, =$REG_IME
    ldr   r1, =0
    strb  r1, [r0]

    // setup DISPSTAT
    ldr   r0, =$REG_DISPSTAT
    ldr   r1, =8 // enable vblank
    strh  r1, [r0]

    // setup IE
    ldr   r0, =$REG_IE
    ldr   r1, =0x21 // enable timer2 + vblank
    strh  r1, [r0]

    // stop timer 0,1,2
    ldr   r0, =$REG_TM0CNT
    ldr   r1, =0
    strh  r1, [r0]
    ldr   r0, =$REG_TM1CNT
    strh  r1, [r0]
    ldr   r0, =$REG_TM2CNT
    strh  r1, [r0]

    // setup timer delays
    ldr   r0, =$REG_TM0D
    .script
      put 'ldr r1, =', 0x10000 - (280896 / $VBLANK_BUFFER)
    .end
    strh  r1, [r0]
    ldr   r0, =$REG_TM1D
    .script
      put 'ldr r1, =', 0x10000 - (304 * 4 * 0x100 / $IRQ_BUFFER)
    .end
    strh  r1, [r0]
    // we want to delay 311296 cycles
    ldr   r0, =$REG_TM2D
    ldr   r1, =0xed00
    strh  r1, [r0]

    // set IRQ handler
    ldr   r0, =0x03007ffc
    ldr   r1, =@irqStartTimer
    str   r1, [r0]

    // enable interrupts
    ldr   r0, =$REG_IME
    ldr   r1, =1
    strb  r1, [r0]

    // turn sound chip on
    ldr   r0, =$REG_SOUNDCNT_X
    ldr   r1, =0x0080
    strh  r1, [r0]

    // set sound to use FIFO A+B
    ldr   r0, =$REG_SOUNDCNT_H
    ldr   r1, =0xcb0f // use A+B, but only output A for now
    strh  r1, [r0]

    // set DMA1 destination to FIFO A
    ldr   r0, =$REG_DMA1DAD
    ldr   r1, =$REG_FIFO_A
    str   r1, [r0]

    // set DMA2 destination to FIFO B
    ldr   r0, =$REG_DMA2DAD
    ldr   r1, =$REG_FIFO_B
    str   r1, [r0]

    // point DMAs to buffers
    ldr   r0, =$REG_DMA1SAD
    ldr   r1, =$G.bufferA1
    str   r1, [r0]
    ldr   r0, =$REG_DMA2SAD
    ldr   r1, =$G.bufferB1
    str   r1, [r0]

    // enable DMA1+DMA2
    ldr   r0, =$REG_DMA1CNT_H
    ldr   r1, =0xb640
    strh  r1, [r0]
    ldr   r0, =$REG_DMA2CNT_H
    strh  r1, [r0]

    // save alt buffers for next render
    ldr   r0, =$G.bufferAddrA
    ldr   r1, =$G.bufferA1
    str   r1, [r0]
    ldr   r0, =$G.bufferAddrA2
    ldr   r1, =$G.bufferA2
    str   r1, [r0]
    ldr   r0, =$G.bufferAddrB
    ldr   r1, =$G.bufferB1
    str   r1, [r0]
    ldr   r0, =$G.bufferAddrB2
    ldr   r1, =$G.bufferB2
    str   r1, [r0]

    // wait for vblank to fire (irqStartTimer)
    swi   0x020000

    // wait for vblank again (irqHop)
    swi   0x020000

    // start timer0+1
    ldr   r0, =$REG_TM0CNT
    ldr   r1, =$REG_TM1CNT
    ldr   r2, =0x0080
    strh  r2, [r0]
    strh  r2, [r1]

    bx    lr
    .pool
  .end

@cycleDelay: //(cyclesToWait)
  // minimum 17 cycle wait, must be in IWRAM, should be called via:
  //   ...A...
  //   mov   r0, rX           \__ inserts exactly r0 cycles
  //   bl    @cycleDelay      /   (including mov and bl)
  //   ...B...
  // if the delay can be stored as a mov instruction, it will work
  //   ...A...
  //   mov   r0, #0x100       \__ inserts delay of 0x100 cycles
  //   bl    @cycleDelay      /
  //   ...B...
  // but if you need a PC-relative load, then subtract 2 more cycles
  // to do the load
  //   ...A...
  //   ldr   r0, =0x101       \__ inserts delay of 0x103 cycles due
  //   bl    @cycleDelay      /   to PC relative load
  //   ...B...
  .begin
    ldr   r2, =@@waitSmall
    sub   r0, #17
    and   r1, r0, #7
    sub   r2, r2, r1, lsl #2
    movs  r0, r0, lsr #3
@@waitBig:
    bxeq  r2
    nop
    nop
    nop
    subs  r0, #1
    b     @@waitBig
    nop
    nop
    nop
    nop
    nop
    nop
    nop
@@waitSmall:
    bx    lr
    .pool
  .end

@renderWaveA: //(buffer8bit)
  .begin
    push  {r4-r5, lr}
    ldr   r1, =@songAStart
    ldr   r2, =$VBLANK_BUFFER
    ldr   r3, =$G.songA
    ldr   r4, [r3]
    add   r1, r4
    add   r4, r2
    ldr   r5, =@songAEnd - @songAStart
    cmp   r4, r5
    blt   @@copy
    sub   r4, r5
@@copy:
    str   r4, [r3]
    bl    @memcpy32.iwram
    pop   {r4-r5}
    pop   {lr}
    bx    lr
    .pool
  .end

@renderWaveB: //(buffer8bit)
  .begin
    push  {r4-r5, lr}
    ldr   r1, =@songBStart
    ldr   r2, =$IRQ_BUFFER
    ldr   r3, =$G.songB
    ldr   r4, [r3]
    add   r1, r4
    add   r4, r2
    ldr   r5, =@songBEnd - @songBStart
    cmp   r4, r5
    blt   @@copy
    sub   r4, r5
@@copy:
    str   r4, [r3]
    bl    @memcpy32.iwram
    pop   {r4-r5}
    pop   {lr}
    bx    lr
    .pool
  .end

@memcpy32.iwram: //(dest, source, byte count)
  .begin
    subs  r2, #32
    blt   @@last32
    stmfd sp!, {r3-r10}
@@chunk:
    ldmia r1!, {r3-r10}
    stmia r0!, {r3-r10}
    subs  r2, #32
    blt   @@done32
    ldmia r1!, {r3-r10}
    stmia r0!, {r3-r10}
    subs  r2, #32
    blt   @@done32
    ldmia r1!, {r3-r10}
    stmia r0!, {r3-r10}
    subs  r2, #32
    blt   @@done32
    ldmia r1!, {r3-r10}
    stmia r0!, {r3-r10}
    subs  r2, #32
    bge   @@chunk
@@done32:
    ldmfd sp!, {r3-r10}
@@last32:
    adds  r2, #32
    bxle  lr
@@last4:
    subs  r2, #4
    ldrge r12, [r1], #4
    strge r12, [r0], #4
    bgt   @@last4
    bxeq  lr
    add   r2, #4
@@bytecopy:
    ldrb  r12, [r1], #1
    ldrb  r12, [r0], #1
    subs  r2, #1
    bgt   @@bytecopy
    bx    lr
    .pool
  .end

// IWRAM END /////////////////////////////////////////////////////////
.end
.align 4
@iwramEnd:

  .align 4
@rate1:
  .script
    var rate = "${num.round 2^24 * $VBLANK_BUFFER / 280896}K"
    put ".i8 \"${rate | str.pad 8}\""
  .end
@rate2:
  .script
    var rate = "${num.round 2^14 * $IRQ_BUFFER / 304}K"
    put ".i8 \"${rate | str.pad 8}\""
  .end

@webUrl:
  .i16 0x2000, 0x2086, 0x2086, 0x2086, 0x2087, 0x2088, 0x2089, 0x208a
  .i16 0x208b, 0x2087, 0x208c, 0x208d

  .align 4
@paletteStart:
  .i16 0, rgb(15, 15, 31), rgb(0, 0, 20)
  .i16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  .i16 0, rgb(15, 15, 31), rgb(31, 31, 31)
  .i16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  .i16 0, rgb(0, 25, 0), rgb(0, 15, 0)
  .i16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  .i16 0, rgb(0, 25, 0), rgb(31, 31, 31)
  .i16 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
@paletteEnd:

  .align $VBLANK_BUFFER
@songAStart:
  .i8fill $VBLANK_BUFFER
  .embed 'song-A.raw'
  .i8fill $VBLANK_BUFFER
  .align $VBLANK_BUFFER
@songAEnd:

  .align $IRQ_BUFFER
@songBStart:
  .i8fill $IRQ_BUFFER
  .embed 'song-B.raw'
  .i8fill $IRQ_BUFFER
  .align $IRQ_BUFFER
@songBEnd:

  .align 4
@tilesheetStart:
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111 // space
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11122111, 0x11122111 // !
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11122111
  .i32 0x11122111, 0x11122111, 0x11111111, 0x11111111
  .i32 0x11122111, 0x11122111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211221, 0x12211221 // "
  .i32 0x12211221, 0x12211221, 0x12211221, 0x12211221
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211221, 0x12211221 // #
  .i32 0x22222222, 0x22222222, 0x12211221, 0x12211221
  .i32 0x22222222, 0x22222222, 0x12211221, 0x12211221
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11122111, 0x11122111, 0x12222211, 0x12222221 // $
  .i32 0x11111221, 0x11111221, 0x11222221, 0x12222211
  .i32 0x12211111, 0x12211111, 0x12222221, 0x11222221
  .i32 0x11122111, 0x11122111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211221, 0x12211221 // %
  .i32 0x11221221, 0x11221111, 0x11122111, 0x11122111
  .i32 0x11112211, 0x12212211, 0x12211221, 0x12211221
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11122211, 0x11222221, 0x11221221, 0x11221221 // &
  .i32 0x11122211, 0x11122211, 0x11112221, 0x11112221
  .i32 0x12222122, 0x12222122, 0x11221122, 0x11221122
  .i32 0x12222222, 0x12212221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11122111, 0x11122111 // '
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11122111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211111, 0x11221111 // (
  .i32 0x11222111, 0x11122111, 0x11122111, 0x11122111
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11222111
  .i32 0x11221111, 0x12211111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111221, 0x11112211 // )
  .i32 0x11122211, 0x11122111, 0x11122111, 0x11122111
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11122211
  .i32 0x11112211, 0x11111221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211221, 0x12211221 // *
  .i32 0x11222211, 0x11222211, 0x22222222, 0x22222222
  .i32 0x11222211, 0x11222211, 0x12211221, 0x12211221
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11122111 // +
  .i32 0x11122111, 0x11122111, 0x12222221, 0x12222221
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111 // ,
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11122111, 0x11122111
  .i32 0x11122111, 0x11122111, 0x11112211, 0x11111211
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111 // -
  .i32 0x11111111, 0x11111111, 0x12222221, 0x12222221
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111 // .
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11122111, 0x11122111
  .i32 0x11122111, 0x11122111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211111, 0x12211111 // forward slash
  .i32 0x12211111, 0x11221111, 0x11221111, 0x11122111
  .i32 0x11122111, 0x11112211, 0x11112211, 0x11111221
  .i32 0x11111221, 0x11111221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11122111, 0x11222211 // 0
  .i32 0x12212221, 0x12211221, 0x12221221, 0x12222221
  .i32 0x12222221, 0x12212221, 0x12211221, 0x12221221
  .i32 0x11222211, 0x11122111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11122111, 0x11122111 // 1
  .i32 0x11122211, 0x11122211, 0x11122111, 0x11122111
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11122111
  .i32 0x12222221, 0x12222221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11222211, 0x12222221 // 2
  .i32 0x12211221, 0x12211221, 0x11221111, 0x11221111
  .i32 0x11122111, 0x11122111, 0x11112211, 0x11112211
  .i32 0x12222221, 0x12222221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12222221, 0x12222221 // 3
  .i32 0x11221111, 0x11221111, 0x11122111, 0x11122111
  .i32 0x11221111, 0x11221111, 0x12211221, 0x12211221
  .i32 0x12222221, 0x11222211, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11221111, 0x11221111 // 4
  .i32 0x11222111, 0x11222111, 0x11222211, 0x11222211
  .i32 0x11221221, 0x11221221, 0x12222221, 0x12222221
  .i32 0x11221111, 0x11221111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12222221, 0x12222221 // 5
  .i32 0x11111221, 0x11111221, 0x11222221, 0x12222221
  .i32 0x12211111, 0x12211111, 0x12211111, 0x12211221
  .i32 0x12222221, 0x11222211, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11222111, 0x11222211 // 6
  .i32 0x11112221, 0x11111221, 0x11111221, 0x11222221
  .i32 0x12222221, 0x12211221, 0x12211221, 0x12211221
  .i32 0x12222221, 0x11222211, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12222221, 0x12222221 // 7
  .i32 0x12211111, 0x12211111, 0x11221111, 0x11221111
  .i32 0x11122111, 0x11122111, 0x11112211, 0x11112211
  .i32 0x11112211, 0x11112211, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11222211, 0x12222221 // 8
  .i32 0x12211221, 0x12211221, 0x11222211, 0x11222211
  .i32 0x12211221, 0x12211221, 0x12211221, 0x12211221
  .i32 0x12222221, 0x11222211, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11222211, 0x12222221 // 9
  .i32 0x12211221, 0x12211221, 0x12222221, 0x12222211
  .i32 0x12211111, 0x12211111, 0x12211111, 0x12221111
  .i32 0x11222211, 0x11122211, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111 // :
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11122111
  .i32 0x11111111, 0x11111111, 0x11122111, 0x11122111
  .i32 0x11122111, 0x11122111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111 // ;
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11122111
  .i32 0x11111111, 0x11111111, 0x11122111, 0x11122111
  .i32 0x11122111, 0x11122111, 0x11112211, 0x11111211
  .i32 0x11111111, 0x11111111, 0x11111111, 0x12221111 // <
  .i32 0x11222111, 0x11122211, 0x11112221, 0x11111222
  .i32 0x11112221, 0x11122211, 0x11222111, 0x12221111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111 // =
  .i32 0x12222221, 0x12222221, 0x11111111, 0x11111111
  .i32 0x12222221, 0x12222221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111222 // >
  .i32 0x11112221, 0x11122211, 0x11222111, 0x12221111
  .i32 0x11222111, 0x11122211, 0x11112221, 0x11111222
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11222211, 0x12222221 // ?
  .i32 0x12211221, 0x12211221, 0x11221111, 0x11221111
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11111111
  .i32 0x11122111, 0x11122111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11122211, 0x11222221 // @
  .i32 0x12211222, 0x12111122, 0x12122122, 0x12212122
  .i32 0x12212122, 0x11222122, 0x11111122, 0x12111222
  .i32 0x12222221, 0x11222211, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11122111, 0x11222211 // A
  .i32 0x12222221, 0x12211221, 0x12211221, 0x12211221
  .i32 0x12222221, 0x12222221, 0x12211221, 0x12211221
  .i32 0x12211221, 0x12211221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11222221, 0x12222221 // B
  .i32 0x12211221, 0x11221221, 0x11122221, 0x11222221
  .i32 0x12211221, 0x12211221, 0x12211221, 0x12211221
  .i32 0x12222221, 0x11222221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11222211, 0x12222221 // C
  .i32 0x12211221, 0x12211221, 0x11111221, 0x11111221
  .i32 0x11111221, 0x11111221, 0x12211221, 0x12211221
  .i32 0x12222221, 0x11222211, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11122221, 0x11222221 // D
  .i32 0x12221221, 0x12211221, 0x12211221, 0x12211221
  .i32 0x12211221, 0x12211221, 0x12211221, 0x12221221
  .i32 0x11222221, 0x11122221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12222221, 0x12222221 // E
  .i32 0x11111221, 0x11111221, 0x11222221, 0x11222221
  .i32 0x11111221, 0x11111221, 0x11111221, 0x11111221
  .i32 0x12222221, 0x12222221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12222221, 0x12222221 // F
  .i32 0x11111221, 0x11111221, 0x11222221, 0x11222221
  .i32 0x11111221, 0x11111221, 0x11111221, 0x11111221
  .i32 0x11111221, 0x11111221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12222211, 0x12222221 // G
  .i32 0x11111221, 0x11111221, 0x12221221, 0x12221221
  .i32 0x12211221, 0x12211221, 0x12211221, 0x12211221
  .i32 0x12222221, 0x11222211, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211221, 0x12211221 // H
  .i32 0x12211221, 0x12211221, 0x12222221, 0x12222221
  .i32 0x12211221, 0x12211221, 0x12211221, 0x12211221
  .i32 0x12211221, 0x12211221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12222221, 0x12222221 // I
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11122111
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11122111
  .i32 0x12222221, 0x12222221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211111, 0x12211111 // J
  .i32 0x12211111, 0x12211111, 0x12211111, 0x12211111
  .i32 0x12211111, 0x12211111, 0x12211221, 0x12211221
  .i32 0x12222221, 0x11222211, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11221122, 0x11221122 // K
  .i32 0x11122122, 0x11122122, 0x11112222, 0x11112222
  .i32 0x11122122, 0x11122122, 0x11221122, 0x11221122
  .i32 0x12211122, 0x12211122, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111221, 0x11111221 // L
  .i32 0x11111221, 0x11111221, 0x11111221, 0x11111221
  .i32 0x11111221, 0x11111221, 0x11111221, 0x11111221
  .i32 0x12222221, 0x12222221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211122, 0x12211122 // M
  .i32 0x12221222, 0x12221222, 0x12222222, 0x12212122
  .i32 0x12212122, 0x12211122, 0x12211122, 0x12211122
  .i32 0x12211122, 0x12211122, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211221, 0x12211221 // N
  .i32 0x12211221, 0x12212221, 0x12212221, 0x12222221
  .i32 0x12222221, 0x12221221, 0x12221221, 0x12211221
  .i32 0x12211221, 0x12211221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11222211, 0x12222221 // O
  .i32 0x12211221, 0x12211221, 0x12211221, 0x12211221
  .i32 0x12211221, 0x12211221, 0x12211221, 0x12211221
  .i32 0x12222221, 0x11222211, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11222221, 0x12222221 // P
  .i32 0x12211221, 0x12211221, 0x12211221, 0x12211221
  .i32 0x12222221, 0x11222221, 0x11111221, 0x11111221
  .i32 0x11111221, 0x11111221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11222211, 0x12222221 // Q
  .i32 0x12211221, 0x12211221, 0x12211221, 0x12211221
  .i32 0x12211221, 0x12211221, 0x12211221, 0x12121221
  .i32 0x11222221, 0x12212211, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11122222, 0x11222222 // R
  .i32 0x11221122, 0x11221122, 0x11221122, 0x11222222
  .i32 0x11122222, 0x11122122, 0x11221122, 0x11221122
  .i32 0x12211122, 0x12211122, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12222211, 0x12222221 // S
  .i32 0x11111221, 0x11111221, 0x11112221, 0x11122211
  .i32 0x11222111, 0x12221111, 0x12211111, 0x12211111
  .i32 0x12222221, 0x11222221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12222221, 0x12222221 // T
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11122111
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11122111
  .i32 0x11122111, 0x11122111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211221, 0x12211221 // U
  .i32 0x12211221, 0x12211221, 0x12211221, 0x12211221
  .i32 0x12211221, 0x12211221, 0x12211221, 0x12211221
  .i32 0x12222221, 0x11222211, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211221, 0x12211221 // V
  .i32 0x12211221, 0x12211221, 0x12211221, 0x12211221
  .i32 0x12211221, 0x12211221, 0x11222211, 0x11222211
  .i32 0x11122111, 0x11122111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211122, 0x12211122 // W
  .i32 0x12211122, 0x12211122, 0x12211122, 0x12212122
  .i32 0x12212122, 0x12222222, 0x12222222, 0x12221222
  .i32 0x12211122, 0x12111112, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211221, 0x12211221 // X
  .i32 0x12211221, 0x11222211, 0x11222211, 0x11122111
  .i32 0x11122111, 0x11222211, 0x11222211, 0x12211221
  .i32 0x12211221, 0x12211221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211221, 0x12211221 // Y
  .i32 0x12211221, 0x12211221, 0x11222211, 0x11222211
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11122111
  .i32 0x11122111, 0x11122111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12222221, 0x12222221 // Z
  .i32 0x11221111, 0x11221111, 0x11122111, 0x11122111
  .i32 0x11112211, 0x11112211, 0x11111221, 0x11111221
  .i32 0x12222221, 0x12222221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12222111, 0x12222111 // [
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11122111
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11122111
  .i32 0x12222111, 0x12222111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111221, 0x11111221 // backslash
  .i32 0x11111221, 0x11112211, 0x11112211, 0x11122111
  .i32 0x11122111, 0x11221111, 0x11221111, 0x12211111
  .i32 0x12211111, 0x12211111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11122221, 0x11122221 // ]
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11122111
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11122111
  .i32 0x11122221, 0x11122221, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11112111, 0x11112111, 0x11122211 // ^
  .i32 0x11122211, 0x11221221, 0x11221221, 0x12211122
  .i32 0x12211122, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x22222222, 0x22222222, 0x22222222, 0x22222222 // solid
  .i32 0x22222222, 0x22222222, 0x22222222, 0x22222222
  .i32 0x22222222, 0x22222222, 0x22222222, 0x22222222
  .i32 0x22222222, 0x22222222, 0x22222222, 0x22222222
  .i32 0x11111111, 0x21111111, 0x22111111, 0x22211111 // speaker
  .i32 0x22221111, 0x22222222, 0x22222222, 0x22222222
  .i32 0x22222222, 0x22222222, 0x22221111, 0x22211111
  .i32 0x22111111, 0x21111111, 0x11111111, 0x11111111
  .i32 0x11112111, 0x11122111, 0x11221111, 0x12211121 // sound waves
  .i32 0x22111221, 0x22112211, 0x22112211, 0x22112211
  .i32 0x22112211, 0x22112211, 0x22111221, 0x12211121
  .i32 0x11221111, 0x11122111, 0x11112111, 0x11111111
  .i32 0x11111111, 0x11133111, 0x11333311, 0x13333331 // indicator
  .i32 0x13333331, 0x11333311, 0x11133111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111
  .i32 0x11111111, 0x11111111, 0x12211122, 0x12211122 // w
  .i32 0x12212122, 0x12222222, 0x11221221, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11111111, 0x11111111 // .
  .i32 0x11111111, 0x11112211, 0x11112211, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11222211, 0x11111221 // s
  .i32 0x11122211, 0x11221111, 0x11122221, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11122211, 0x11221221 // e
  .i32 0x11222221, 0x11111221, 0x11222211, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11122211, 0x11221111 // a
  .i32 0x11222211, 0x11221221, 0x12222211, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11222122, 0x12212221 // n
  .i32 0x12211221, 0x12211221, 0x12211221, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11222211, 0x11211221 // c
  .i32 0x11111221, 0x11211221, 0x11222211, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11221222, 0x12222222 // m
  .i32 0x12212122, 0x12212122, 0x12211122, 0x11111111
  .i32 0x11222111, 0x11221111, 0x11222211, 0x11221221 // d
  .i32 0x11221221, 0x11221221, 0x12222211, 0x11111111
  .i32 0x11111111, 0x11122111, 0x11111111, 0x11122111 // i
  .i32 0x11122111, 0x11122111, 0x11122111, 0x11111111
  .i32 0x11112111, 0x11112211, 0x11222221, 0x11112211 // t
  .i32 0x11112211, 0x11112211, 0x11122111, 0x11111111
  .i32 0x11112221, 0x11112211, 0x11222211, 0x12212211 // h
  .i32 0x12212211, 0x12212211, 0x12212221, 0x11111111
  .i32 0x11111111, 0x11111111, 0x11122221, 0x11221221 // r
  .i32 0x11111221, 0x11111221, 0x11111221, 0x11111111
@tilesheetEnd:

.align 0x00800000
